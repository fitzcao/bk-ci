/*
 * Tencent is pleased to support the open source community by making BK-CI 蓝鲸持续集成平台 available.
 *
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * BK-CI 蓝鲸持续集成平台 is licensed under the MIT license.
 *
 * A copy of the MIT License is included in this file.
 *
 *
 * Terms of the MIT License:
 * ---------------------------------------------------
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

apply plugin: "kotlin"
apply plugin: "maven"
apply plugin: "kotlin-spring"

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
}

uploadArchives {

    def mavenRepoDeployUrl = System.getProperty("mavenRepoDeployUrl")
    def mavenRepoUsername = System.getProperty("mavenRepoUsername")
    def mavenRepoPassword = System.getProperty("mavenRepoPassword")

    if (mavenRepoDeployUrl == null) {
        mavenRepoDeployUrl = System.getenv("mavenRepoDeployUrl")
    }

    if (mavenRepoUsername == null) {
        mavenRepoUsername = System.getenv("mavenRepoUsername")
    }

    if (mavenRepoPassword == null) {
        mavenRepoPassword = System.getenv("mavenRepoPassword")
    }

    if (mavenRepoDeployUrl == null) {
        mavenRepoDeployUrl = MAVEN_REPO_DEPLOY_URL
    }

    if (mavenRepoUsername == null) {
        mavenRepoUsername = MAVEN_REPO_USERNAME
    }

    if (mavenRepoPassword == null) {
        mavenRepoPassword = MAVEN_REPO_PASSWORD
    }

    // if snapshot repository is null
    def snapshotRepositoryUrl = ""
    if (MAVEN_REPO_SNAPSHOT_DEPLOY_URL == null || MAVEN_REPO_SNAPSHOT_DEPLOY_URL.toString() == "") {
        snapshotRepositoryUrl = mavenRepoDeployUrl
    } else {
        snapshotRepositoryUrl = MAVEN_REPO_SNAPSHOT_DEPLOY_URL
    }

    def snapshotRepositoryUsername = ""
    if (MAVEN_REPO_SNAPSHOT_USERNAME == null || MAVEN_REPO_SNAPSHOT_USERNAME.toString() == "") {
        snapshotRepositoryUsername = mavenRepoUsername
    } else {
        snapshotRepositoryUsername = MAVEN_REPO_SNAPSHOT_USERNAME
    }

    def snapshotRepositoryPassword = ""
    if (MAVEN_REPO_SNAPSHOT_PASSWORD == null || MAVEN_REPO_SNAPSHOT_PASSWORD.toString() == "") {
        snapshotRepositoryPassword = mavenRepoPassword
    } else {
        snapshotRepositoryPassword = MAVEN_REPO_SNAPSHOT_PASSWORD
    }

    repositories {
        mavenDeployer {
            repository(url: mavenRepoDeployUrl) {
                authentication(userName: mavenRepoUsername, password: mavenRepoPassword)
            }

            snapshotRepository(url: snapshotRepositoryUrl) {
                authentication(userName: snapshotRepositoryUsername, password: snapshotRepositoryPassword)
            }
        }

    }
}

uploadArchives.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
install.onlyIf { !sourceSets.main.allSource.files.isEmpty() }